using System.Collections;
using System.Collections.Generic;

namespace PipLib.Mod
{
    /// <summary>
    /// The main abstract PipLib mod.
    /// <example>
    /// Implmented as such:
    /// <code>
    /// public class YourMod : PipMod
    /// {
    ///     public YourMod () : base("YourMod", "YM") { }
    ///     
    ///     public void Load ()
    ///     {
    ///         // Do your stuff here
    ///     }
    /// }
    /// </code>
    /// </example>
    /// </summary>
    public abstract class PipMod
    {
        public readonly string name;
        public readonly string prefix;

        public readonly ILogger logger;

        protected internal readonly List<ElementFactory> elements = new List<ElementFactory>();
        protected internal readonly List<BuildingFactory> buildings = new List<BuildingFactory>();

        public PipMod(string name = null, string prefix = null)
        {
            if (name == null)
            {
                name = GetType().Name;
            }
            this.name = name;
            this.prefix = prefix ?? name;
            logger = GlobalLogger.Get().Fork(name);
        }

        public abstract void Load();

        /// <summary>
        /// Creates a new element factory to register new substances. Substances are registered automatically.
        /// </summary>
        /// <see cref="ElementFactory"/>
        /// <param name="name">The internal name of the element</param>
        /// <returns>An element factory</returns>
        public ElementFactory CreateElement(string name)
        {
            var element = PipLib.CreateElement(this, name);
            elements.Add(element);
            return element;
        }

        /// <summary>
        /// Creates multiple tags in bulk
        /// </summary>
        /// <param name="tags">The tags to create</param>
        public void CreateTags (params string[] tags)
        {
            foreach (var tag in tags)
            {
                CreateTag(tag);
            }
        }

        /// <summary>
        /// Creates a new substance tag with the given name and an optional proper name
        /// </summary>
        /// <param name="tag">The tag name</param>
        /// <param name="properName">The tag's proper name, if any</param>
        public void CreateTag (string tag, string properName = null)
        {
            if (properName != null)
            {
                logger.Info("Create tag: {0} ({1}}", properName, tag);
                TagManager.Create(tag, properName);
            }
            else
            {
                logger.Info("Create tag: {0}", tag);
                TagManager.Create(tag);
            }
        }

        /// <summary>
        /// Creates a factory for adding a building
        /// </summary>
        /// <param name="name">The internal name of the building</param>
        /// <returns>The building factory</returns>
        public BuildingFactory CreateBuilding (string name)
        {
            var building = PipLib.CreateBuilding(this, name);
            buildings.Add(building);
            return building;
        }

        internal void RegisterSimHashes(Dictionary<SimHashes, string> hashTable, Dictionary<string, object> hashTableReverse)
        {
            foreach (var e in elements)
            {
                e.RegisterSimHashes(hashTable, hashTableReverse);
            }
        }

        internal void RegisterSubstances(Hashtable substanceList, SubstanceTable substanceTable)
        {
            foreach (var e in elements)
            {
                e.RegisterSubstances(substanceList, substanceTable);
            }
        }

        internal void RegisterStrings()
        {
            foreach (var e in elements)
            {
                e.RegisterStrings();
            }
            foreach (var b in buildings)
            {
                b.RegisterStrings();
            }
        }

        internal void RegisterAttributes()
        {
            foreach (var e in elements)
            {
                e.RegisterAttributes();
            }
        }

        public override string ToString()
        {
            return name;
        }

        public override bool Equals(object obj)
        {
            return obj is PipMod mod &&
                   name == mod.name;
        }

        public override int GetHashCode()
        {
            // generated by Visual Studio
            return 363513814 + EqualityComparer<string>.Default.GetHashCode(name);
        }
    }

    /// <summary>
    /// Core implementation of <see cref="PipMod"/> used for internal mod management.
    /// </summary>
    public class BasePipMod : PipMod
    {
        public const string NAME = "BasePipMod";

        public const string MISSING_ANIM_NAME = "missinganim";
        public const string MISSING_TEX_NAME = "missingtex";

        public static BasePipMod instance;

        public static void OnLoad()
        {
            PipLib.Add(instance);
        }

        static BasePipMod()
        {
            instance = new BasePipMod();
        }

        public BasePipMod() : base(NAME, "Pip") { }

        public override void Load()
        {
            CreateElement("DebugElement")
                .SetUnlocalizedName("Debug Element")
                .AddUnlocalizedDescription("Internal debugging element for PipLib. Not intended for normal gameplay.")
                .SetColor(new UnityEngine.Color32(255, 80, 255, 255))
                .AddState(Element.State.Solid)
                .AddState(Element.State.Liquid)
                .AddState(Element.State.Gas)
                .AddAttributeModifier(db => db.BuildingAttributes.Decor.Id, 1f, isMultiplier: true)
                .AddAttributeModifier(db => db.BuildingAttributes.OverheatTemperature.Id, 1000f);
        }
    }
}
