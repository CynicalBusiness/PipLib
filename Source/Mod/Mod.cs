using System.Collections.Generic;
using PipLib.Asset;
using PipLib.World;

namespace PipLib.Mod
{
    /// <summary>
    /// The main abstract PipLib mod.
    /// <example>
    /// Implmented as such:
    /// <code>
    /// public class YourMod : PipMod
    /// {
    ///     public YourMod () : base("YourMod", "YM") { }
    ///     
    ///     public void Load ()
    ///     {
    ///         // Do your stuff here
    ///     }
    /// }
    /// </code>
    /// </example>
    /// </summary>
    public abstract class PipMod
    {
        public readonly string name;
        public readonly string prefix;

        protected internal readonly List<PipElement> elements = new List<PipElement>();

        public PipMod(string name, string prefix = null)
        {
            this.name = name;
            this.prefix = prefix ?? name;
        }

        public abstract void Load();

        /// <summary>
        /// Adds the given elements to be loaded
        /// </summary>
        /// <param name="elements"></param>
        public void AddElements(IEnumerable<PipElement> elements)
        {
            foreach (var element in elements)
            {
                this.elements.Add(element);
            }
        }

        /// <summary>
        /// Loads the given Unity asset bundle into the <see cref="AssetLoader"/>.
        /// </summary>
        /// <param name="bundle">The name of the bundle to load</param>
        /// <returns>The number of loaded assets</returns>
        /// <seealso cref="AssetLoader"/>
        public int LoadAssetBundle(string bundle)
        {
            return AssetLoader.Get().LoadBundle(this, bundle);
        }

        /// <summary>
        /// Gets an asset from an already-loaded asset bundle by name.
        /// </summary>
        /// <typeparam name="T">The type of asset to get</typeparam>
        /// <param name="name">The name of the asset</param>
        /// <returns>The asset found, or <c>null</c>.</returns>
        /// <seealso cref="AssetLoader.GetAsset{T}(PrefixedId, out T)"/>
        public T GetAsset<T>(string name) where T : UnityEngine.Object
        {
            AssetLoader.Get().GetAsset<T>(new PrefixedId(this, name), out var asset);
            return asset;
        }

        public override string ToString()
        {
            return name;
        }

        public override bool Equals(object obj)
        {
            return obj is PipMod mod &&
                   name == mod.name;
        }

        public override int GetHashCode()
        {
            // generated by Visual Studio
            return 363513814 + EqualityComparer<string>.Default.GetHashCode(name);
        }
    }

    /// <summary>
    /// Core implementation of <see cref="PipMod"/> used for internal mod management.
    /// </summary>
    public class BaseMod : PipMod
    {
        public const string NAME = "Base";

        public const string MISSING_ANIM_NAME = "missinganim";
        public const string MISSING_TEX_NAME = "missingtex";

        public static BaseMod instance;

        public static void OnLoad()
        {
            PipLib.LoadMod(BaseMod.instance);
        }

        static BaseMod()
        {
            instance = new BaseMod();
        }

        public BaseMod() : base(NAME)
        {
        }

        public override void Load()
        {
            // add elements
            AddElements(new PipElement[]
            {
                new PipElement(this, "DebugElement"){
                    name = "Debug Element",
                    desc = "Internal debugging element for PipLib. Not intended for normal gameplay.",
                    baseColor = new UnityEngine.Color32(255, 80, 255, 255)
                }
                    .AddSolid()
                    .AddLiquid()
                    .AddGas()
                    .AddBuildingOverheatModifier(1000f)
                    .AddBuildingDecorModifier(1f)
            });
        }
    }
}
